---
# tasks file for deploy_w_docker
- name: Supprimer complètement le répertoire existant
  file:
    path: /var/www/sample-app
    state: absent
  become: true

- name: Recreate /var/www/sample-app directory
  file:
    path: /var/www/sample-app
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'
    recurse: true

- name: Rends /var/www/sample-app comme 'safe' Git repository
  command: git config --global --add safe.directory /var/www/sample-app
  become: true

- name: Cloner le dépôt Laravel
  git:
    repo: https://github.com/vladrzvk/laravel_counter_for_obsolet_assets.git
    dest: /var/www/sample-app
    version: iaas
    force: yes
  become: true

- name: Accorde les droits necessaire pour sample-app
  file:
    path: /var/www/sample-app
    owner: www-data
    group: www-data
    recurse: true

- name: Accorde les droits necessaires sur les fichiers
  file:
    path: "{{ item }}"
    mode: '0775'
    recurse: true
  loop:
    - /var/www/sample-app/storage
    - /var/www/sample-app/bootstrap/cache

- name: Check s'il y a des conteneurs en cours
  shell: docker ps -q
  register: running_containers
  changed_when: false

- name: Stop tous les conteneurs en cours
  shell: docker stop $(docker ps -q)
  when: running_containers.stdout != ""
  ignore_errors: true

- name: Check les conteneurs en cours
  shell: docker ps -aq
  register: all_containers
  changed_when: false

- name: Supprime tous les conteneurs
  shell: docker rm $(docker ps -aq)
  when: all_containers.stdout != ""
  ignore_errors: true

- name: Vérifier les variables d'environnement Docker
  debug:
    var: docker_env_vars

- name: Créer le fichier .env pour Docker
  copy:
    content: |
      {% for key, value in docker_env_vars.items() %}
      {{ key }}={{ value }}
      {% endfor %}
    dest: /var/www/sample-app/.env
    owner: www-data
    group: www-data
    mode: '0644'

- name: Run Docker Compose for sample-app
  command: docker-compose up -d
  args:
    chdir: /var/www/sample-app


- name: Attendre que MySQL dans le conteneur soit prêt 
  command: >
    docker exec sample-app_db_1
    mysql -h 127.0.0.1
          -u{{ docker_env_vars.DB_USERNAME }}
          -p{{ docker_env_vars.DB_PASSWORD }}
          -e "SELECT 1;"
  register: mysql_check
  changed_when: false        # EN: We don't consider it "changed" if the command finally works
  failed_when: false         # EN: We don't fail immediately if rc != 0
  retries: 10
  delay: 20
  until: mysql_check.rc == 0
  become: true

# Vérifier l'état des migrations Laravel
- name: Vérifier si des migrations sont déjà appliquées
  # EN: Run 'php artisan migrate:status' to see if the DB is up-to-date or not
  command: docker exec sample-app_app_1 php artisan migrate:status
  register: migrations_status
  changed_when: false       # EN: We don't consider this as "changed" for Ansible
  failed_when: false        # EN: Even if it returns a non-zero code, we won't fail immediately
  become: true

# Créer une migration init si aucune migration n'est détectée
- name: Créer une migration si aucune n'existe
  # EN: If rc != 0, it probably means there are no migrations table or something is missing.
  #     We create a basic init_migration as in your original logic.
  command: docker exec sample-app_app_1 php artisan make:migration init_migration
  when: migrations_status.rc != 0
  become: true

# Exécuter les migrations uniquement si elles ne sont pas encore à jour
- name: Exécuter les migrations Laravel
  # EN: If rc == 0, that means everything is up-to-date. If != 0, we run 'migrate --force'.
  command: docker exec sample-app_app_1 php artisan migrate --force
  register: migration_output
  when: migrations_status.rc != 0
  become: true

# Afficher le résultat des migrations uniquement si elles ont été exécutées
- name: Afficher le résultat des migrations
  debug:
    var: migration_output.stdout
  when: migrations_status.rc != 0

# Exécuter le seeding de la base de données
- name: Remplir la base de données avec des données de seeders
  # EN: We only seed if we actually had to run migrations.
  command: docker exec sample-app_app_1 php artisan db:seed --force
  register: seed_output
  when: migrations_status.rc != 0
  become: true  

# Afficher le résultat du seeding
- name: Afficher le résultat du seeding
  debug:
    var: seed_output.stdout
  when: migrations_status.rc != 0