---
# tasks file for deploy_w_docker

- name: Debug FQDN
  debug:
    var: docker_env_vars.AZ_FQDN
    
- name: Supprimer complètement le répertoire existant
  file:
    path: /var/www/vm-laravel-folder
    state: absent
  become: true

- name: Recreate /var/www/vm-laravel-folder directory
  file:
    path: /var/www/vm-laravel-folder
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'
    recurse: true

- name: Rends /var/www/vm-laravel-folder comme 'safe' Git repository
  command: git config --global --add safe.directory /var/www/vm-laravel-folder
  become: true

- name: Cloner le dépôt Laravel
  git:
    repo: https://github.com/vladrzvk/laravel_counter_for_obsolet_assets.git
    dest: /var/www/vm-laravel-folder
    version: iaasV2
    force: yes
  become: true

- name: Accorde les droits necessaire pour vm-laravel-folder
  file:
    path: /var/www/vm-laravel-folder
    owner: www-data
    group: www-data
    recurse: true

- name: Accorde les droits necessaires sur les fichiers
  file:
    path: "{{ item }}"
    mode: '0775'
    recurse: true
  loop:
    - /var/www/vm-laravel-folder/storage
    - /var/www/vm-laravel-folder/bootstrap/cache

- name: Check s'il y a des conteneurs en cours
  shell: docker ps -q
  register: running_containers
  changed_when: false

- name: Stop tous les conteneurs en cours
  shell: docker stop $(docker ps -q)
  when: running_containers.stdout != ""
  ignore_errors: true

- name: Check les conteneurs en cours
  shell: docker ps -aq
  register: all_containers
  changed_when: false

- name: Supprime tous les conteneurs
  shell: docker rm $(docker ps -aq)
  when: all_containers.stdout != ""
  ignore_errors: true

- name: Vérifier les variables d'environnement Docker
  debug:
    var: docker_env_vars

- name: Créer le fichier .env pour laravel (dans /demo)
  copy:
    content: |
      {% for key, value in docker_env_vars.items() %}
      {{ key }}={{ value }}
      {% endfor %}
    dest: /var/www/vm-laravel-folder/demo/.env
    owner: www-data
    group: www-data
    mode: '0644'

- name: Créer le fichier .env pour Docker (dans /var/www/vm-laravel-folder/.env)
  copy:
    content: |
      {% for key, value in docker_env_vars.items() %}
      {{ key }}={{ value }}
      {% endfor %}
    dest: /var/www/vm-laravel-folder/.env
    owner: www-data
    group: www-data
    mode: '0644'

# Démarre les conteneurs
- name: Run Docker Compose for vm-laravel-folder
  command: docker-compose up -d
  args:
    chdir: /var/www/vm-laravel-folder

# Attendre que MySQL dans le conteneur soit prêt
- name: Attendre que MySQL dans le conteneur soit prêt
  command: >
    docker exec vm-laravel-folder_db_1
    mysql -h 127.0.0.1
          -u{{ docker_env_vars.DB_USERNAME }}
          -p{{ docker_env_vars.DB_PASSWORD }}
          -e "SELECT 1;"
  register: mysql_check
  changed_when: false
  failed_when: false
  retries: 10
  delay: 20
  until: mysql_check.rc == 0
  become: true

# Vérifier l'état des migrations Laravel
- name: Vérifier si des migrations sont déjà appliquées
  command: docker exec vm-laravel-folder_app_1 php artisan migrate:status
  register: migrations_status
  changed_when: false
  failed_when: false
  become: true

# Créer une migration init si aucune migration n'existe
- name: Créer une migration si aucune n'existe
  command: docker exec vm-laravel-folder_app_1 php artisan make:migration init_migration
  when: migrations_status.rc != 0
  become: true

# Exécuter les migrations uniquement si elles ne sont pas à jour
- name: Exécuter les migrations Laravel
  command: docker exec vm-laravel-folder_app_1 php artisan migrate --force
  register: migration_output
  when: migrations_status.rc != 0
  become: true

# Afficher le résultat des migrations
- name: Afficher le résultat des migrations
  debug:
    var: migration_output.stdout
  when: migrations_status.rc != 0

# Exécuter le seeding de la base de données
- name: Remplir la base de données avec des données de seeders
  command: docker exec vm-laravel-folder_app_1 php artisan db:seed --force
  register: seed_output
  when: migrations_status.rc != 0
  become: true

# Afficher le résultat du seeding
- name: Afficher le résultat du seeding
  debug:
    var: seed_output.stdout
  when: migrations_status.rc != 0

# - name: Générer la clé d'application Laravel
#   command: docker exec -w /app vm-laravel-folder_app_1 php artisan key:generate
#   register: keygen_output
#   become: true

# - name: Copier le fichier .env du conteneur vers demo/.env
#   command: docker cp vm-laravel-folder_app_1:/app/.env /var/www/vm-laravel-folder/demo/.env
#   become: true

# - name: Dupliquer le .env vers /var/www/vm-laravel-folder/.env
#   command: cp /var/www/vm-laravel-folder/demo/.env /var/www/vm-laravel-folder/.env
#   become: true

# - name: Vérifier /var/www/vm-laravel-folder/demo/.env
#   command: cat /var/www/vm-laravel-folder/demo/.env
#   register: env_demo_content
#   become: true

# - name: Vérifier /var/www/vm-laravel-folder/.env
#   command: cat /var/www/vm-laravel-folder/.env
#   register: env_main_content
#   become: true

# - name: Debug .env
#   debug:
#     msg: 
#       - "demo/.env => {{ env_demo_content.stdout }}"
#       - "main .env => {{ env_main_content.stdout }}"

# - name: Afficher la clé Laravel générée
#   debug:
#     var: env_content.stdout_lines

# - name: Redémarrer le conteneur Laravel pour prendre en compte la nouvelle clé
#   command: docker restart vm-laravel-folder_app_1
#   become: true
